@page "/ritten"
@inject HttpClient Http

<h3>Nieuwe Rit Toevoegen</h3>

<EditForm Model="@nieuweRit" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <InputText class="form-control" @bind-Value="nieuweRit.BeginAdres" placeholder="Beginadres" />
    </div>

    <div class="mb-2">
        <InputText class="form-control" @bind-Value="nieuweRit.EindAdres" placeholder="Eindadres" />
    </div>

    <div class="mb-2">
        <InputNumber class="form-control" @bind-Value="nieuweRit.BeginKmStand" placeholder="Begin Km" />
    </div>

    <div class="mb-2">
        <InputNumber class="form-control" @bind-Value="nieuweRit.EindKmStand" placeholder="Eind Km" />
    </div>

    <div class="mb-2">
        <InputDate class="form-control" @bind-Value="nieuweRit.Datum" />
    </div>

    <div class="mb-2">
        <InputNumber class="form-control" @bind-Value="nieuweRit.AutoId" placeholder="Auto ID" />
    </div>

    <div class="mb-2">
        <InputNumber class="form-control" @bind-Value="nieuweRit.GebruikerId" placeholder="Gebruiker ID" />
    </div>

    <button class="btn btn-primary">Toevoegen</button>
</EditForm>

<hr />

<h3>Alle Ritten</h3>

@if (ritten == null)
{
    <p>Laden...</p>
}
else if (ritten.Count == 0)
{
    <p>Er zijn nog geen ritten.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Auto ID</th>
                <th>Gebruiker ID</th>
                <th>Beginadres</th>
                <th>Eindadres</th>
                <th>Kilometers</th>
                <th>Datum</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rit in ritten)
            {
                <tr>
                    <td>@rit.AutoId</td>
                    <td>@rit.GebruikerId</td>
                    <td>@rit.BeginAdres</td>
                    <td>@rit.EindAdres</td>
                    <td>@rit.BeginKmStand - @rit.EindKmStand</td>
                    <td>@rit.Datum.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private CreateRitDto nieuweRit = new();
    private List<RitListItemDto>? ritten;

    protected override async Task OnInitializedAsync()
    {
        await LaadRitten();
    }

    private async Task HandleValidSubmit()
    {
        await Http.PostAsJsonAsync("https://localhost:7146/api/ritten", nieuweRit);
        await LaadRitten();
        nieuweRit = new(); // Reset formulier
    }

    private async Task LaadRitten()
    {
        ritten = await Http.GetFromJsonAsync<List<RitListItemDto>>("https://localhost:7146/api/ritten");
    }

    // DTO's (kun je ook importeren vanuit Covauto.Shared)
    public class CreateRitDto
    {
        public int AutoId { get; set; }
        public int GebruikerId { get; set; }
        public string BeginAdres { get; set; } = "";
        public string EindAdres { get; set; } = "";
        public int BeginKmStand { get; set; }
        public int EindKmStand { get; set; }
        public DateTime Datum { get; set; }
    }

    public class RitListItemDto
    {
        public int Id { get; set; }
        public int AutoId { get; set; }
        public int GebruikerId { get; set; }
        public string BeginAdres { get; set; } = "";
        public string EindAdres { get; set; } = "";
        public int BeginKmStand { get; set; }
        public int EindKmStand { get; set; }
        public DateTime Datum { get; set; }
    }
}
